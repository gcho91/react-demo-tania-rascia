{"version":3,"sources":["TableHead.js","TableBody.js","Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHead","TableBody","props","console","log","peopleData","rows","map","row","index","key","name","job","onClick","removeCharacter","Table","Form","handleChange","event","target","value","setState","submitForm","state","handleSubmit","initialState","this","type","onChange","Component","App","characters","filter","character","i","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAeeA,MAZf,WACI,OACI,+BACI,4BACI,oCACA,mCACA,yCCgCDC,MAtCf,SAAmBC,GACfC,QAAQC,IAAIF,EAAMG,WAAY,MAE9B,IAAMC,EAAOJ,EAAMG,WAAWE,IAAI,SAACC,EAAKC,GACpC,OACI,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACI,4BAAQC,QAAS,WAAMX,EAAMY,gBAAgBL,KAA7C,gBAMd,OACI,+BACKH,ICLES,MAVf,SAAeb,GAEX,OADAC,QAAQC,IAAIF,EAAMG,YAEd,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWA,WAAYH,EAAMG,WAAYS,gBAAiBZ,EAAMY,oB,OCwC7DE,E,YA9CX,WAAYd,GAAQ,IAAD,8BACf,4CAAMA,KAQVe,aAAe,SAACC,GAAW,IAAD,EACEA,EAAMC,OAAtBR,EADc,EACdA,KAAMS,EADQ,EACRA,MACd,EAAKC,SAAL,eACKV,EAAOS,KAZG,EAenBE,WAAa,SAACJ,GACVf,QAAQC,IAAI,qBAAsB,EAAKmB,OACvC,EAAKrB,MAAMsB,aAAa,EAAKD,OAE7B,EAAKF,SAAS,EAAKI,eAjBnB,EAAKA,aAAe,CAChBd,KAAM,GACNC,IAAK,IAET,EAAKW,MAAQ,EAAKE,aANH,E,sEAsBT,IAAD,EACiBC,KAAKH,MAAnBZ,EADH,EACGA,KAAMC,EADT,EACSA,IAGd,OAFAT,QAAQC,IAAIO,EAAMC,GAGd,8BACI,uCACA,2BACIe,KAAK,OACLhB,KAAK,OACLS,MAAOT,EACPiB,SAAUF,KAAKT,eACnB,sCACA,2BACIU,KAAK,OACLhB,KAAK,MACLS,MAAOR,EACPgB,SAAUF,KAAKT,eACnB,2BAAOU,KAAK,SAASP,MAAM,SAASP,QAASa,KAAKJ,kB,GA1C/CO,aC6EJC,E,2MAzEbP,MAAQ,CACNQ,WAAY,I,EAGdjB,gBAAkB,SAACL,GACjBN,QAAQC,IAAI,sBADe,IAGnB2B,EAAe,EAAKR,MAApBQ,WACR5B,QAAQC,IAAI2B,GAEZ,EAAKV,SAAS,CACZU,WAAYA,EAAWC,OAAO,SAACC,EAAWC,GACxC,OAAOA,IAAMzB,O,EAOnBe,aAAe,SAAAS,GAEb,EAAKZ,SAAS,CAACU,WAAW,GAAD,mBAAM,EAAKR,MAAMQ,YAAjB,CAA6BE,O,mFAGpC,IACVF,EAAeL,KAAKH,MAApBQ,WACR5B,QAAQC,IAAI2B,K,+BAGJ,IAEAA,EAAeL,KAAKH,MAApBQ,WAGR,OAFA5B,QAAQC,IAAI2B,GAGV,yBAAKI,UAAU,aACb,kBAAC,EAAD,CAAO9B,WAAY0B,EAAYjB,gBAAmBY,KAAKZ,kBACvD,kBAAC,EAAD,CAAMU,aAAgBE,KAAKF,oB,GAtCjBK,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5e18206c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction TableHead() {\n    return (\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Job</th>\n                <th>Remove</th>\n            </tr>\n        </thead>\n    );\n}\n\nexport default TableHead;\n","import React from 'react';\nimport './App.css';\n\nfunction TableBody(props) {\n    console.log(props.peopleData, \"tb\")\n    //map thru arr to return table row for each obj in array\n    const rows = props.peopleData.map((row, index) => {\n        return (\n            <tr key={index}>\n              <td>{row.name}</td>\n              <td>{row.job}</td>\n              <td>\n                  <button onClick={()=> {props.removeCharacter(index)}}> Delete </button>\n              </td>\n            </tr>\n          )\n    })\n\n    return (\n        <tbody>\n            {rows}\n        {/* <tr>\n          <td>Charlie</td>\n          <td>Janitor</td>\n        </tr>\n        <tr>\n          <td>Mac</td>\n          <td>Bouncer</td>\n        </tr>\n        <tr>\n          <td>Dee</td>\n          <td>Aspiring actress</td>\n        </tr>\n        <tr>\n          <td>Dennis</td>\n          <td>Bartender</td>\n        </tr> */}\n      </tbody>\n    );\n}\n\nexport default TableBody;\n","import React from 'react';\nimport './App.css';\nimport TableHead from './TableHead';\nimport TableBody from './TableBody';\n\nfunction Table(props) {\n    console.log(props.peopleData)\n    return (\n        <table>\n            <TableHead />\n            <TableBody peopleData={props.peopleData} removeCharacter={props.removeCharacter} />\n        </table>\n    );\n}\n\nexport default Table;\n","import React, { Component } from 'react';\n\nclass Form extends Component {\n    //you need constructor to use 'this'\n    constructor(props) {\n        super(props);\n        this.initialState = {\n            name: '',\n            job: ''\n        };\n        this.state = this.initialState;\n\n    };\n    handleChange = (event) => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value,\n        })\n    };\n    submitForm = (event) => {\n        console.log(\"handle submit form\", this.state);\n        this.props.handleSubmit(this.state);\n        //clear form, reset state\n        this.setState(this.initialState);\n    }\n\n    render() {\n        const { name, job } = this.state;\n        console.log(name, job);\n\n        return (\n            <form>\n                <label>Name</label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={this.handleChange} />\n                <label>Job</label>\n                <input\n                    type=\"text\"\n                    name=\"job\"\n                    value={job}\n                    onChange={this.handleChange} />\n                <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n            </form>\n        )\n    }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    characters: [\n    ]\n  };\n  removeCharacter = (index) => {\n    console.log(\"Remove a character\");\n\n    const { characters } = this.state\n    console.log(characters);\n\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index;\n        // pass in index, return new array\n      })\n    })\n\n  };\n\n  handleSubmit = character => {\n    //takes existing this.state.characters, adds new character\n    this.setState({characters: [...this.state.characters, character]})\n  };\n\n  componentDidMount(){\n    const { characters } = this.state\n    console.log(characters)\n\n  }\n  render() {\n\n    const { characters } = this.state;\n    console.log(characters)\n\n    return (\n      <div className=\"container\">\n        <Table peopleData={characters} removeCharacter = {this.removeCharacter}/>\n        <Form handleSubmit = {this.handleSubmit}/>\n      </div>\n    )\n  }\n}\n\n// function App() {\n// functional compo can't have states unless using react hooks\n// react stateless functional components\n\n// const characters = [\n//   {\n//     name: 'Charlieeeeee',\n//     job: 'Janitor',\n//   },\n//   {\n//     name: 'Macssssss!',\n//     job: 'Bouncer',\n//   },\n//   {\n//     name: 'Deeeeeee',\n//     job: 'Aspring actress',\n//   },\n//   {\n//     name: 'Dennissssss',\n//     job: 'Bartender',\n//   }\n// ];\n// console.log(characters, \"YO\")\n//   return (\n//     <div className=\"container\"> \n//       <Table peopleData={characters}/>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}